---

- name: Ensure client_build_hash.txt exists
  copy:
    content: "new-unbuilt"
    dest: "/cvmfs/{{ galaxy_cvmfs_repo }}/galaxy/static/client_build_hash.txt"
    force: no

- name: Fetch client version
  command: "cat /cvmfs/{{ galaxy_cvmfs_repo }}/galaxy/static/client_build_hash.txt"
  register: client_build_version_response

- name: Set client build version fact
  set_fact:
    galaxy_client_build_version: "{{ client_build_version_response.stdout }}"

- name: Install nodeenv
  command: "docker run --rm -v /cvmfs:/cvmfs galaxy/update su - {{ galaxy_user }} -c \"{{ galaxy_venv_dir }}/bin/pip install nodeenv\""
  args:
    creates: "{{ galaxy_venv_dir }}/bin/nodeenv"
  when: galaxy_client_build_version != galaxy_commit

- name: Install node
  command: "docker run --rm -v /cvmfs:/cvmfs galaxy/update su - {{ galaxy_user }} -c \". {{ galaxy_venv_dir }}/bin/activate {{ galaxy_conda_env | default('') }}; nodeenv -n {{ galaxy_node_version }} -p\""
  # FIXME: don't run every time, but make it possible to upgrade when galaxy_node_version changes
  #args:
  #  creates: "{{ galaxy_venv_dir }}/bin/npm"
  when: galaxy_client_build_version != galaxy_commit

- name: Install yarn
  command: "docker run --rm -v /cvmfs:/cvmfs galaxy/update su - {{ galaxy_user }} -c \". {{ galaxy_venv_dir }}/bin/activate {{ galaxy_conda_env | default('') }}; npm install --global yarn\""
  args:
    creates: "{{ galaxy_venv_dir }}/bin/yarn"
  when: galaxy_client_build_version != galaxy_commit

- name: Build client
  command: "docker run --rm -v /cvmfs:/cvmfs galaxy/update su - {{ galaxy_user }} -c \"cd /cvmfs/{{ galaxy_cvmfs_repo }}/galaxy; . {{ galaxy_venv_dir }}/bin/activate {{ galaxy_conda_env | default('') }}; make client-production-maps\""
  when: galaxy_client_build_version != galaxy_commit

- name: Fetch client version
  command: "cat /cvmfs/{{ galaxy_cvmfs_repo }}/galaxy/static/client_build_hash.txt"
  register: client_build_version_response
  when: galaxy_client_build_version != galaxy_commit

- name: Set client build version fact
  set_fact:
    galaxy_client_build_version: "{{ client_build_version_response.stdout }}"
  when: galaxy_client_build_version != galaxy_commit

- name: Abort playbook upon update failure
  fail:
    msg: "Client build {{ galaxy_client_build_version }} version does not match repo version after building {{ galaxy_commit }}"
  when: galaxy_client_build_version != galaxy_commit
