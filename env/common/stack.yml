---

- name: Install and manage PostgreSQL
  hosts: dbservers
  remote_user: root
  pre_tasks:
    - name: Install psycopg2
      yum:
        name: python-psycopg2
      when: ansible_os_family == 'RedHat'
    - name: Install psycopg2
      apt:
        name: python3-psycopg2
      when: ansible_os_family == "Debian"
    # This is a dirty hack (but then, so are LX Brand zones, especially in 2020)
    # NOTE: you'll have to SIGINT the first run of ansible-playbook when it hangs while starting postgres because the package install overwrites it. You will probably also need to restart postgresql@12-main to unstick it the second time.
    - name: Force override PostgreSQL instance systemd service unit on LX Brand zones
      copy:
        src: systemd/postgresql@.service
        dest: /lib/systemd/system/postgresql@.service
        mode: "0644"
        backup: true
      when: ansible_system == "Linux" and ansible_virtualization_type == "zone" and ansible_os_family == "Debian"
  roles:
    - galaxyproject.postgresql
  # FIXME: what was this doing here when we installed it above?? actually - probably have to do it after for PGDG? We'll
  # find out soon
  #tasks:
  #  - name: Install psycopg2 for postgresql_objects
  #    action:
  #      module: "{{ 'yum' if ansible_os_family == 'RedHat' else 'apt' }}"
  #      name: python-psycopg2
  tags: postgres

- name: Manage PostgreSQL users, groups, databases, and permissions
  hosts: dbservers
  remote_user: root
  become: yes
  become_user: postgres
  roles:
    - natefoo.postgresql_objects
  tags: postgres

- name: Set sysctl values for uWSGI
  hosts: galaxywebservers:galaxystagingservers # doesn't work in lx :toolshedwebservers
  remote_user: root
  tasks:
    - name: Set sysctl values
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: no
        sysctl_set: yes
      with_items: "{{ sysctl_conf }}"

# Done before nginx is installed because it will fail to start in the next play if the module doesn't exist
- name: Install nginx mod_zip
  hosts: galaxywebservers
  remote_user: root
  tasks:
    - name: Install ngx_http_zip_moodule.so
      ansible.builtin.get_url:
        url: "{{ nginx_mod_zip_url }}"
        dest: /usr/lib64/nginx/modules/ngx_http_zip_module.so
        mode: 0755
      when: nginx_mod_zip_url is defined
  tags: nginx

- name: Install and manage nginx
  hosts: webservers
  remote_user: root
  roles:
    - paths   # for certbot_well_known_root + tacc_protected in test env
    - copy    # for tacc_protected in test env
    - galaxyproject.nginx
  tags: nginx

#- name: Tasks for SELinux and UNIX socket proxies
#  # FIXME:
#  #hosts: toolshedwebservers
#  hosts: testtoolshed.galaxyproject.org
#  remote_user: root
#  tasks:
#    - name: Add Tool Shed user to nginx group
#      user:
#        name: "{{ toolshed_user }}"
#        groups: nginx
#    # FIXME: AFAICT this should work but for some reason the writable socket doesn't and I don't have any more time to mess with it
#    #- name: Allow nginx httpd_sys_content_t to access additional paths
#    #  sefcontext:
#    #    target: '{{ item.base }}{{ item.extra }}'
#    #    setype: '{{ item.setype }}'
#    #    state: present
#    #  loop:
#    #    - base: "{{ galaxy_errordocs_dest }}"
#    #      extra: "(/.*)?"
#    #      setype: httpd_sys_content_t
#    #    - base: "{{ galaxy_toolshed_config.uwsgi.socket }}"
#    #      extra: ""
#    #      setype: httpd_sys_rw_content_t
#    #  register: updated_fcontexts
#    #- name: Apply new SELinux file context to system
#    #  command: "restorecon -rv {{ item.item.base }}"
#    #  loop: "{{ updated_fcontexts.results }}"
#    #  when: item is changed
#    # FIXME: using the insecure sledgehammer for now
#    - name: Change httpd_t to permissive
#      selinux_permissive:
#        name: httpd_t
#        permissive: true
#  tags: nginx

- name: Install logflux
  hosts: logfluxservers
  remote_user: root
  roles:
    - users
    - paths
    - logflux
  tags: logflux

- name: Manage galaxy root tasks
  hosts: galaxyservers:toolshedservers
  remote_user: root
  roles:
    - paths   # creates toolshed_tmpdir
    - usegalaxy_admin
    - cron
  tags: galaxy,admin

#- name: Manage supervisor and root tasks
#  hosts: supervisorservers
#  remote_user: root
#  roles:
#    - supervisor
#  tags: supervisor

#- name: Configure zerg mode
#  hosts: zergmodeservers
#  remote_user: root
#  roles:
#    - zergmode
#  tags: zergmode

- name: Configure TIaaS
  hosts: tiaasservers
  remote_user: root
  roles:
    - galaxyproject.tiaas2
  tags: tiaas

# FIXME: requires Ansible 2.11, run from tusd.yml for now
#- name: install tusd
#  hosts: galaxywebservers
#  remote_user: root
#  roles:
#    - galaxyproject.tusd

- name: Manage supervisor and root tasks
  hosts: supervisorservers
  remote_user: root
  roles:
    - supervisor
  tags: supervisor

# NOTE: this would fail the first time stack is run if Galaxy is not yet installed
- name: Manage Galaxy systemd tasks
  hosts: galaxyservers
  remote_user: root
  roles:
    - role: galaxyproject.galaxy
      galaxy_manage_clone: no
      galaxy_manage_static_setup: no
      galaxy_manage_mutable_setup: no
      galaxy_manage_database: no
      galaxy_fetch_dependencies: no
      galaxy_manage_errordocs: no
      galaxy_build_client: no
      galaxy_manage_systemd: yes
      galaxy_manage_gravity: no
  tags: gravity

- name: Kubernetes deployment
  hosts: kubedeployers
  gather_facts: false
  tasks:
    - name: Deploy resources
      kubernetes.core.k8s:
        state: "{{ item.state | default('present') }}"
        resource_definition: "{{ item.definition }}"
        kubeconfig: "{{ kubedeployer_kubeconfig }}"
      loop: "{{ kubernetes_deploy_resources | default([]) }}"
      loop_control:
        label: "{{ item.label | default(item.definition) }}"
      delegate_to: localhost
  tags: kubernetes,k8s
