---

# by default, tools are assigned 1 core, 8 GB of memory, and a 36 hour walltime

# WARNING: Anything defined in a spec must be valid for all possible destinations of a tool!

tools:

  # python 2 legacy tools
{% for tool_id in galaxy_python2_legacy_tools %}
{% set short_tool_id = tool_id.split('/')[-2] %}
  {{ tool_id }}: {destination: {{ (short_tool_id in galaxy_multicore_tools) | ternary('multi', 'slurm') }}_legacy}
{% endfor %}

  # 6 cores (roundup) or 10 cores (jetstream), 30 GB of memory, and a 36 hour walltime
{# this is a large automatically generated list maintained in env/test/group_vars/galaxyservers/tools_conf.yml #}
{% for tool_id in galaxy_multicore_tools %}
  {{ tool_id }}: {destination: multi}
{% endfor %}

  kraken:
    # can be a list if you want to do different things with different params (or one thing with no checked params)
    - params:
        - name: kraken_database
          value: bacteria
      # can be a real id or key in 'destinations' dict below
      destination: stampede_skx_normal
    - destination: multi

  trinity:
    # first matching param set is used
    # for collection params, comparison is implicitly on size of pair member 0

    # normalizing inputs < 10GB get 5 * 48GB = 240GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 240G, time: 72}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 240G, time: 72}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 240G, time: 72}

    # normalizing 10G <= inputs < 100G get 10 * 48GB = 480GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}

    # normalizing inputs >= 100G get 15 * 48GB = 720GB
    - params:
        - {name: norm, value: true}
      destination: bridges_normal
      spec: {mem: 720G, time: 96}

    # not normalizing inputs < 10GB get 10 * 48GB = 480GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 480G, time: 96}

    # not normalizing 10G <= inputs < 100G get 15 * 48GB = 720GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 720G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 720G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 720G, time: 96}

    # not normalizing inputs >= 100G get 20 * 48GB = 960GB
    - params:
        - {name: norm, value: false}
      destination: bridges_normal
      spec: {mem: 960G, time: 96}

    # default if no matching params (shouldn't happen)
    - destination: bridges_normal
      spec: {time: 24}

# SPAdes (and thus Unicycler) uses at most 250GB
  unicycler:
    destination: bridges_normal
    spec:
      mem: 288G
    env:
      - execute: ulimit -s 24576
  spades:
    destination: bridges_normal
    spec:
      mem: 288G
    env:
      - execute: ulimit -s 24576

  foo:
    destination: normal_16gb


# can contain spec like tool mapping, tool mapping keys override
#destinations:
  #normal:
  #  id: slurm_normal
  #  #priority_id: reserved_normal
  #normal_16gb:
  #  id: slurm_normal_16gb
  #  #priority_id: reserved_normal_16gb
  #multi:
  #  - id: slurm_multi
  #    #priority_id: reserved_multi
  #  - id: jetstream_iu_multi
  #    # no reserved? what happens now?
  #  #priority_id: reserved_multi
  #  #queued_job_threshold: 4   # do we need separate for each dest?

# FIXME: relisting all these shared thresholds isn't ideal, just create a tag section like:
#shared_thresholds:
#-
#  - slurm_multi_legacy
#  - slurm_multi
#  - slurm_long

destinations:
  #normal_legacy:
  #  - id: slurm_legacy
  #  - id: jetstream_iu_normal_legacy
  multi_legacy:
    - id: slurm_multi_legacy
      shared_thresholds:
        - slurm_multi
    - id: jetstream_iu_multi_legacy
      shared_thresholds:
        - jetstream_iu_multi
  multi:
    - id: slurm_multi
      shared_thresholds:
        - slurm_multi_legacy
    - id: jetstream_iu_multi
      shared_thresholds:
      - jetstream_iu_multi_legacy
  multi_long:
    - id: slurm_multi_long
      # this counts slurm_multi's queued jobs against slurm_multi_long when determining a destination
      shared_thresholds:
        - slurm_multi
    - id: stampede_long
  jetstream_multi:
    - id: jetstream_iu_multi
  stampede_normal:
    max:
      ntasks: 272
    override:
      time: 48
  stampede_development:
    max:
      ntasks: 272
    override:
      time: 2
  stampede_skx_normal:
    max:
      ntasks: 96
    override:
      time: 48
  stampede_skx_development:
    max:
      ntasks: 96
    override:
      time: 2
  stampede_long:
    max:
      time: 120
  bridges_normal:
    override:
      mem: 720G
    normalize:
      mem: 48G
  bridges_development:
    override:
      mem: 720G
    normalize:
      mem: 48G

groups:
  Job Priority Users:
    destination_overrides:
      slurm_normal: reserved_normal
      slurm_normal_16gb: reserved_normal_16gb
      #slurm_multi: reserved_multi
      multi: reserved_multi
  Job Resource Param Users:
    param_overrides: true
