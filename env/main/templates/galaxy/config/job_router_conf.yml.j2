---
#
# This file is maintained by Ansible - CHANGES WILL BE OVERWRITTEN
#

# WARNING: this file is shared between Test and Main!

# by default, tools are assigned 1 core, 8 GB of memory, and a 36 hour walltime

# tools dict:
#   keys are long or short tool IDs
#   values are either:
#     - a string: alias to another key in the dictionary
#     - a dict: specifying params to check (for match), destination, and native spec param overrides
#     - a list of dicts: for multiple possibilities based on different param selection
#
#     keys (in the case of dict or list of dicts) are:
#
#       params (optional): a list of dicts of tool params that will be checked for a match:
#         name: tool param to check
#           - if the param value is a list, comparison will be against its first element
#           - if the param value refers to a dataset, comparison will be against the size
#           - if the param value refers to a dataset collection, comparison will be against the size of the first element
#         op (optional, default: '=='): comparison operation (python operator)
#         value: value against which to compare the tool param, using op
#           - value is the rhs of the operator: <param> <op> <value>
#           - if value is a list, comparisons are performed against all values and the param set is considered a match
#             if the comparison is true for any value in the list (i.e. a logical OR)
#           - if the comparison is against a size, the value will be converted from a size string  to bytes
#         type (optional, default: null): 'data_table_lookup' to perform a data table lookup using the tool param listed
#                                         in 'name' as the lookup key
#         if the type is 'data_table_lookup', additional params keys are:
#           table_name (required): data table name
#           lookup_column (optional, default: 'value'): data table column name to perform lookup on
#           value_column (optional, default: 'path'): data table column name providing the value to compare against
#           value_template (optional, default: '{value}'): str.format() string, allows manipulation of the lookup results.
#                                                          only 'value' (contents of value_column) is currently supported.
#
#       destination: a destination id in the Galaxy job conf or a destination grouping in the destinations: section
#
#       spec: dict of native spec params. keys/values not valid for whatever destination is ultimately chosen will be
#             ignored. if the key is already specified in the native spec for a dest, the value is overridden with the
#             one in spec. if not, the key/val are appended to the native spec. subject to authorization in the
#             'destinations' section below.
#
#   - the destination/spec for the first set of matching param(s) is used
#   - if no params match, a default (dict without a 'params' key is used)
#   - if no default is specified, a hardcoded default in job_router.py is used

tools:

  #_default_: {destination: slurm_normal}
  #_galaxy_lib_: {destination: slurm_normal_galaxy_env}
  _default_: {destination: slurm_normal_direct}
  _galaxy_lib_: {destination: slurm_normal_py2_direct}

  # these are for once you flip the switch on the defaults above (but we should make these work in Singularity!)
  upload1: {destination: slurm_normal_direct}
  __DATA_FETCH__: {destination: slurm_normal_direct}

  # python 2 legacy tools
{% for tool_id in galaxy_python2_legacy_tools %}
{% set short_tool_id = tool_id.split('/')[-2] %}
  {{ tool_id }}: {destination: slurm_{{ (short_tool_id in galaxy_multicore_tools) | ternary('multi', 'normal') }}_py2_direct}
{% endfor %}

  # 6 cores (roundup) or 10 cores (jetstream), 30 GB of memory, and a 36 hour walltime
{# this is a large automatically generated list maintained in env/<env>/group_vars/galaxyservers/tools_conf.yml #}
{% for tool_id in galaxy_multicore_tools %}
{% if tool_id in galaxy_pulsar_incompatible_tools %}
  {{ tool_id }}: {destination: slurm_multi_direct, login_required: true}
{% else %}
  {{ tool_id }}: {destination: multi_direct, login_required: true}
{% endif %}
{% endfor %}

  # 1 core, 16 GB of memory, and a 36 hour walltime
  #join1: {destination: slurm_normal_16gb_direct}
  gops_join_1: {destination: slurm_normal_16gb_direct}
  gatk_indel_realigner: {destination: slurm_normal_16gb_direct}
  gatk_depth_of_coverage: {destination: slurm_normal_16gb_direct}
  gatk_table_recalibration: {destination: slurm_normal_16gb_direct}
  #fastq_paired_end_joiner: {destination: slurm_normal_16gb_direct}
  bamtools: {destination: slurm_normal_16gb_direct}
  varscan: {destination: slurm_normal_16gb_direct}
  scatterplot_rpy: {destination: slurm_normal_16gb_direct}
  htseq_count: {destination: slurm_normal_16gb_direct}
  flanking_features_1: {destination: slurm_normal_16gb_direct}
  cummeRbund: {destination: slurm_normal_16gb_direct}
  collection_column_join: {destination: slurm_normal_16gb_direct}
  rseqc_read_duplication: {destination: slurm_normal_16gb_direct}
  rseqc_RPKM_saturation: {destination: slurm_normal_16gb_direct}
  rseqc_bam2wig: {destination: slurm_normal_16gb_direct}
  seqtk_sample: {destination: slurm_normal_16gb_direct}
  ggplot2_heatmap2: {destination: slurm_normal_16gb_direct}
  kc-align: {destination: slurm_normal_16gb_direct}
  porechop: {destination: slurm_normal_16gb_direct}
  read2mut: {destination: slurm_normal_16gb_direct}
  #annotatemyids: {destination: slurm_normal_16gb_direct}

  # TODO: this can be a function of base pairs in the reference
  genrich: {destination: slurm_normal_16gb_direct}

  # 1 core, 32 GB of memory, and a 36 hour walltime
  Interval2Maf1: {destination: slurm_normal_32gb_direct}

  # TODO: maybe just send these to stampede?
  # 1 core, 64 GB of memory, and a 36 hour walltime
  wig_to_bigWig: {destination: slurm_normal_64gb_direct}
  CONVERTER_bedgraph_to_bigwig: {destination: slurm_normal_64gb_direct}

  #
  # Tools with special mappings
  #

  # Singularity - SEE TEST JOB ROUTER CONF
  cat1: {destination: slurm_normal}
  filter_tabular: {destination: slurm_normal}
  sqlite_to_tabular: {destination: slurm_normal}
  query_tabular: {destination: slurm_normal}
  table_compute: {destination: slurm_normal}
  Add_a_column1: {destination: slurm_normal}
  cat_multiple: {destination: slurm_normal}
  regexColumn1: {destination: slurm_normal}
  regex1: {destination: slurm_normal}
  tp_split_on_column: {destination: slurm_normal}
  addName: {destination: slurm_normal}
  tp_awk_tool: {destination: slurm_normal}
  melt: {destination: slurm_normal}
  tp_find_and_replace: {destination: slurm_normal}
  cast: {destination: slurm_normal}
  jq: {destination: slurm_normal}
  gff3.rebase: {destination: slurm_normal}
  column_remove_by_header: {destination: slurm_normal}
  column_order_header_sort: {destination: slurm_normal}
  tp_easyjoin_tool: {destination: slurm_normal}
  tp_replace_in_line: {destination: slurm_normal}
  uniprot: {destination: slurm_normal}
  replace_column_with_key_value_file: {destination: slurm_normal}
  tp_sed_tool: {destination: slurm_normal}
  tp_unfold_column_tool: {destination: slurm_normal}
  tp_uniq_tool: {destination: slurm_normal}
  tp_replace_in_column: {destination: slurm_normal}
  tp_multijoin_tool: {destination: slurm_normal}
  tp_tail_tool: {destination: slurm_normal}
  tp_cut_tool: {destination: slurm_normal}
  tp_text_file_with_recurring_lines: {destination: slurm_normal}
  tp_sorted_uniq: {destination: slurm_normal}
  tp_sort_header_tool: {destination: slurm_normal}
  tp_grep_tool: {destination: slurm_normal}
  tp_head_tool: {destination: slurm_normal}
  tp_tac: {destination: slurm_normal}
  tp_cat: {destination: slurm_normal}
  Convert characters1: {destination: slurm_normal}
  cat1: {destination: slurm_normal}
  random_lines1: {destination: slurm_normal}
  Show beginning1: {destination: slurm_normal}
  Show tail1: {destination: slurm_normal}
  trimmer: {destination: slurm_normal}
  wc_gnu: {destination: slurm_normal}
  secure_hash_message_digest: {destination: slurm_normal}
  mergeCols1: {destination: slurm_normal}
  createInterval: {destination: slurm_normal}
  Filter1: {destination: slurm_normal}
  # FIXME: uncomment after this is merged and deployed: https://github.com/galaxyproject/galaxy/pull/12619
  #sort1: {destination: slurm_normal}
  Grep1: {destination: slurm_normal}
  gtf_filter_by_attribute_values_list: {destination: slurm_normal}
  Grouping1: {destination: slurm_normal}
  subtract_query1: {destination: slurm_normal}
  datamash_reverse: {destination: slurm_normal}
  datamash_transpose: {destination: slurm_normal}
  datamash_ops: {destination: slurm_normal}
  umi_tools_extract: {destination: slurm_normal}
  filtlong: {destination: slurm_normal}
  fasta-stats: {destination: slurm_normal}
  fasta_merge_files_and_filter_unique_sequences: {destination: slurm_normal}
  filter_by_fasta_ids: {destination: slurm_normal}
  rbc_splitfasta: {destination: slurm_normal}
  fasta_compute_length: {destination: slurm_normal}
  fasta_concatenate0: {destination: slurm_normal}
  fasta_filter_by_length: {destination: slurm_normal}
  fastq_quality_trimmer: {destination: slurm_normal}
  fastq_trimmer: {destination: slurm_normal}
  fastq_combiner: {destination: slurm_normal}
  fastq_filter: {destination: slurm_normal}
  fastq_groomer: {destination: slurm_normal}
  fastq_manipulation: {destination: slurm_normal}
  fastq_masker_by_quality: {destination: slurm_normal}
  fastq_paired_end_splitter: {destination: slurm_normal}
  fastq_paired_end_deinterlacer: {destination: slurm_normal}
  fastq_paired_end_interlacer: {destination: slurm_normal}
  cshl_fastx_artifacts_filter: {destination: slurm_normal}
  cshl_fastx_renamer: {destination: slurm_normal}
  cshl_fastq_quality_filter: {destination: slurm_normal}
  cshl_fastx_clipper: {destination: slurm_normal}
  cshl_fastx_reverse_complement: {destination: slurm_normal}
  cshl_fastx_trimmer: {destination: slurm_normal}
  umi_tools_count: {destination: slurm_normal}
  fasplit: {destination: slurm_normal}
  sickle: {destination: slurm_normal}
  trim_galore: {destination: slurm_normal}
  bg_find_subsequences: {destination: slurm_normal}
  cshl_fasta_nucleotides_change: {destination: slurm_normal}
  length_and_gc_content: {destination: slurm_normal}
  cshl_fastx_barcode_splitter: {destination: slurm_normal}
  cshl_fastq_quality_converter: {destination: slurm_normal}
  cshl_fastx_collapser: {destination: slurm_normal}
  cshl_fasta_formatter: {destination: slurm_normal}
  fastq_join: {destination: slurm_normal}
  tab2fasta: {destination: slurm_normal}
  fasta2tab: {destination: slurm_normal}
  fastqe: {destination: slurm_normal}
  prinseq: {destination: slurm_normal}
  multiqc: {destination: slurm_normal}
  fastqc: {destination: slurm_normal}
  fastq_stats: {destination: slurm_normal}
  cshl_fastx_quality_statistics: {destination: slurm_normal}
  cshl_fastx_nucleotides_distribution: {destination: slurm_normal}
  cshl_fastq_quality_boxplot: {destination: slurm_normal}
  samtools_markdup: {destination: slurm_normal}
  bamutil_clip_overlap: {destination: slurm_normal}
  sam_merge2: {destination: slurm_normal}
  pileup_interval: {destination: slurm_normal}
  samtools_view: {destination: slurm_normal}
  samtools_reheader: {destination: slurm_normal}
  sam_pileup: {destination: slurm_normal}
  bamtools: {destination: slurm_normal}

  # Singularity normal + py2
  gff_filter_by_attribute: {destination: slurm_normal_py2}
  toolshed.g2.bx.psu.edu/repos/devteam/fasta_filter_by_length/fasta_filter_by_length/1.1: {destination: slurm_normal_py2}
  toolshed.g2.bx.psu.edu/repos/devteam/short_reads_trim_seq/trim_reads/1.0.0: {destination: slurm_normal_py2}

  # Singularity normal + galaxy env (note: these should be handled by the job router if listed in galaxy-lib tools)
  gff_filter_by_feature_count: {destination: slurm_normal_galaxy_env}

  # Singularity normal + resolv.conf fix
  toolshed.g2.bx.psu.edu/repos/bgruening/uniprot_rest_interface/uniprot/0.2: {destination: slurm_normal_resolv_fix}

  # Singularity normal + conda/TS/Galaxy deps; we should try to fix or remove these over time
  # No datamash=1.0.6 container
  toolshed.g2.bx.psu.edu/repos/iuc/datamash_reverse/datamash_reverse/1.0.6: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/iuc/datamash_transpose/datamash_transpose/1.0.6: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/iuc/datamash_ops/datamash_ops/1.0.6: {destination: slurm_normal_conda}
  # No fastx_toolkit=0.0.13 container
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_artifacts_filter/cshl_fastx_artifacts_filter/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_renamer/cshl_fastx_renamer/0.0.11: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_quality_filter/cshl_fastq_quality_filter/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_clipper/cshl_fastx_clipper/1.0.1: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_reverse_complement/cshl_fastx_reverse_complement/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_trimmer/cshl_fastx_trimmer/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fasta_nucleotide_changer/cshl_fasta_nucleotides_changer/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_quality_converter/cshl_fastq_quality_converter/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_collapser/cshl_fastx_collapser/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fasta_formatter/cshl_fasta_formatter/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_quality_statistics/cshl_fastx_quality_statistics/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_nucleotides_distribution/cshl_fastx_nucleotides_distribution/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastx_barcode_splitter/cshl_fastx_barcode_splitter/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_quality_boxplot/cshl_fastq_quality_boxplot/1.0.0: {destination: slurm_normal_conda}
  # No ea-utils=1.1.2-806 container
  toolshed.g2.bx.psu.edu/repos/lparsons/fastq_join/fastq_join/1.1.2-806.1: {destination: slurm_normal_conda}
  # No gnu_coreutils container, but most of these could probably run in the legacy container without traditional deps
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cat/0.1.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_cut_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_easyjoin_tool/1.0.0: {destination: slurm_normal_conda}
  # In this case, the conda dep is actually broken since grep is compiled without PCRE support, so just use the
  # container grep
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_grep_tool/1.0.0:
    destination: slurm_normal_conda
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/corral4/main/singularity/usegalaxy.org-legacy-environment--0"}]
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_head_tool/1.0.0: {destination: slurm_normal_conda}
  # Can't find strict.pm?
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_multijoin_tool/1.0.0:
    destination: slurm_normal_conda
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/corral4/main/singularity/usegalaxy.org-legacy-environment--0"}]
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sed_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sort_header_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sorted_uniq/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_tac/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_tail_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_text_file_with_recurring_lines/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_unfold_column_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_uniq_tool/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sort_rows/1.0.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/text_processing/tp_sort_rows/1.1.0: {destination: slurm_normal_conda}
  # Has requirement for cutadapt but also needs /usr/bin/perl
  toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.4.0: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.4.1: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.4.2: {destination: slurm_normal_conda}
  #
  toolshed.g2.bx.psu.edu/repos/devteam/tabular_to_fasta/tab2fasta/1.1.0: {destination: slurm_normal_conda}
  # samtools:0.1.16 image is broken and needs rebuild: /usr/local/bin/samtools: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory
  toolshed.g2.bx.psu.edu/repos/devteam/sam_pileup/sam_pileup/1.1.3: {destination: slurm_normal_conda}
  # no mulled container for requirements and it's too old to create one
  toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/0.0.1: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/0.0.2: toolshed.g2.bx.psu.edu/repos/devteam/bamtools/bamtools/0.0.1

  # Singularity multi + conda/TS/Galaxy deps;
  toolshed.g2.bx.psu.edu/repos/pjbriggs/trimmomatic/trimmomatic/0.32.3: {destination: slurm_multi_conda}
  toolshed.g2.bx.psu.edu/repos/pjbriggs/trimmomatic/trimmomatic/0.36.2: {destination: slurm_multi_conda}
  toolshed.g2.bx.psu.edu/repos/pjbriggs/trimmomatic/trimmomatic/0.36.3: {destination: slurm_multi_conda}
  toolshed.g2.bx.psu.edu/repos/pjbriggs/trimmomatic/trimmomatic/0.36.5: {destination: slurm_multi_conda}

  # There is a fastqc=0.10.1 container but the tool is missing a dep on python=2.7
  # TODO: this should become a standard environment, possibly just the regular image for slurm_normal_conda
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.52: {destination: slurm_normal_conda}
  #  destination: slurm_normal_conda
  #  # this doesn't work because these early versions are python wrappers around perl scripts around a java application
  #  container_override: [{type: singularity, shell: '/bin/sh', resolve_dependencies: true, identifier: "/corral4/main/singularity/usegalaxy.org-legacy-environment--0"}]
  #  # nope, no perl...
  #  container_override: [{type: singularity, shell: '/bin/sh', resolve_dependencies: true, identifier: "/cvmfs/singularity.galaxyproject.org/all/centos:7.9.2009"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.63: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.64: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.65: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.67: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.68: {destination: slurm_normal_conda}
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.69: {destination: slurm_normal_conda}
  # FIXME: something seems wrong here, container should be good but singularity seems to die and java continues to run
  # outside container?
  toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.71: {destination: slurm_normal_conda}

  # Singularity normal 16GB
  # TODO: removing outliers > 100GB that were probably due to runaway memory in a job where limits weren't working, this
  # tool uses < 6.5 GB 90.8% of the time and is a good candidate for running w/ 8 GB and resubmitting on failure.
  annotatemyids: {destination: slurm_normal_16gb}
  # tool uses < 6.5 GB 89.2% of the time
  join1: {destination: slurm_normal_16gb}
  fastq_paired_end_joiner: {destination: slurm_normal_16gb}

  # Singularity multicore
  cutadapt: {destination: multi, login_required: true}
  fastp: {destination: multi, login_required: true}
  flash: {destination: multi, login_required: true}
  trimmomatic: {destination: multi, login_required: true}
  qualimap_bamqc: {destination: multi, login_required: true}

  # Singularity w/ forced container and other special cases

  # as of 21.09, has no requirement tags
  addValue:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  Paste1:
    destination: slurm_normal
    # coreutils=8.25,perl=5.22.0.1
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/mulled-v2-c5660771860859a51697ce13d5d74251dc4c8eb6:254c9751502b0d56aa64890243ee9ebd88e94048-0"}]
  Remove beginning1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  Condense characters1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  createInterval:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  Cut1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  ChangeCase:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]
  Extract_features1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/bx-python:0.8.9--py38hb90e610_2"}]
  comp1:
    destination: slurm_normal
    # python=3.7,coreutils=8.30
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/mulled-v2-879928bcdd8adc5b4660a3f6de3703d7c7861de4:6ce96688844d469d84f94fabb34055d8dfa283c7-0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_trimmer/fastq_trimmer/1.0.0:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_trimmer_by_quality/fastq_quality_trimmer/1.0.0:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_combiner/fastq_combiner/1.0.1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_filter/fastq_filter/1.0.0:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_groomer/fastq_groomer/1.0.4:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_manipulation/fastq_manipulation/1.0.1:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_masker_by_quality/fastq_masker_by_quality/1.0.0:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_paired_end_splitter/fastq_paired_end_splitter/1.0.0:
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_paired_end_joiner/fastq_paired_end_joiner/1.0.0:
    destination: slurm_normal_16gb
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/devteam/fastq_stats/fastq_stats/1.0.0:
    destination: slurm_normal_16gb
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/galaxy_sequence_utils:1.0.0--py27_0"}]
  toolshed.g2.bx.psu.edu/repos/bgruening/find_subsequences/bg_find_subsequences/0.2:
    # depends: biopython 1.65, but no container exists
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/biopython:1.66--np110py36_0"}]

  toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.3.1:
    # container exists but Galaxy picks the python 3 version, which needs this due to
    # https://click.palletsprojects.com/en/7.x/python3/#python-3-surrogate-handling
    destination: slurm_normal
    env: [{name: LC_ALL, value: C.UTF-8}, {name: SINGULARITYENV_LC_ALL, value: $LC_ALL}]
  toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.5.0: toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.3.1
  toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.6: toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.3.1
  toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.7: toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.3.1
  toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.7.1: toolshed.g2.bx.psu.edu/repos/iuc/multiqc/multiqc/1.3.1
  toolshed.g2.bx.psu.edu/repos/devteam/pileup_interval/pileup_interval/1.0.3:
    # no idea why this does not work automatically as the tool has a defined requirement on bx-python 0.7.1
    destination: slurm_normal
    container_override: [{type: singularity, shell: '/bin/sh', identifier: "/cvmfs/singularity.galaxyproject.org/all/bx-python:0.7.1"}]
  toolshed.g2.bx.psu.edu/repos/devteam/pileup_interval/pileup_interval/1.0.0: toolshed.g2.bx.psu.edu/repos/devteam/pileup_interval/pileup_interval/1.0.3
  toolshed.g2.bx.psu.edu/repos/devteam/pileup_interval/pileup_interval/1.0.2: toolshed.g2.bx.psu.edu/repos/devteam/pileup_interval/pileup_interval/1.0.3

  # Valiant efforts but no luck
  # No fontconfig=2.11.1,rpy=1.0.3,R=2.11.0 container
  #toolshed.g2.bx.psu.edu/repos/devteam/short_reads_figure_score/quality_score_distribution/1.0.2:
  #  destination: slurm_normal_conda
  #  container_override: [{type: singularity, shell: '/bin/sh', resolve_dependencies: true, identifier: "/cvmfs/singularity.galaxyproject.org/all/python:2.7.16"}]
  # No perl dependency, seems not work with 5.22 (EL7 has 5.16)
  #toolshed.g2.bx.psu.edu/repos/devteam/fastx_barcode_splitter/cshl_fastx_barcode_splitter/1.0.0:
  #  destination: slurm_normal_conda
  #  container_override: [{type: singularity, shell: '/bin/sh', resolve_dependencies: true, identifier: "/cvmfs/singularity.galaxyproject.org/all/perl:5.22.0--9"}]

  # Multicore tools that are not Pulsar/Jetstream friendly

  # https://github.com/galaxyproject/tools-iuc/pull/3420
  # add version comparison to job_router and you can undo this for newer versions
  deseq2: {destination: slurm_multi_direct, login_required: true}
  # still investigating
  stringtie: {destination: slurm_multi_direct, login_required: true}

  # STAR=fusion uses all_fasta, not rnastar_index2, and more details about the memory usage is needed
  star_fusion:
    destination: jetstream_tacc_xlarge_direct
    login_required: true

  # STARSolo uses the same params and has the same requirements as STAR
  rna_starsolo: rna_star

  # STAR goes to either standard multi partitions (roundup/jetstream) or a special Jetstream m1.xlarge partition
  rna_star:
    # small input test
    #   nope - STAR memory requirements are based on the size of the reference
    #- params:
    #  - name: sc.input_types.input1
    #    op: '<'
    #    value: 100M
    #  destination: multi
    # for built-in refs we need (refsize * 1.5) + 2GB
    - params:
      - name: refGenomeSource.geneSource
        value: indexed
      - name: refGenomeSource.GTFconditional.genomeDir
        type: data_table_lookup
        table_name: rnastar_index2x_versioned
        value_template: '{value}/SA'
        op: '<'
        value: 18G
      destination: multi_direct
      login_required: true
    # same as above but for older versions of the tool
    - params:
      - name: refGenomeSource.geneSource
        value: indexed
      - name: refGenomeSource.GTFconditional.genomeDir
        type: data_table_lookup
        table_name: rnastar_index2
        value_template: '{value}/SA'
        op: '<'
        value: 18G
      destination: multi_direct
      login_required: true
    - params:
      - name: refGenomeSource.geneSource
        value: indexed
      destination: jetstream_tacc_xlarge_direct
      login_required: true

    # for history refs we need (refsize * 11.0) + 2GB
    - params:
      - name: refGenomeSource.geneSource
        value: history
      - name: refGenomeSource.genomeFastaFiles
        op: '<'
        value: 2.5G
      destination: multi
      login_required: true
    - params:
      - name: refGenomeSource.geneSource
        value: history
      destination: jetstream_tacc_xlarge_direct
      login_required: true

    # this should cover all cases, otherwise go to normal where it will probably fail and we can investigate
    #- destination: slurm_normal

  # TODO: refine, but per Björn "start with 52"
  #hifiasm:
  #  destination: jetstream_tacc_xlarge
  #  login_required: true

  # Kraken goes to Stampede 2 SKX if the bacteria database is selected, otherwise it goes to standard multi
  kraken:
    # can be a list if you want to do different things with different params (or one thing with no checked params)
    - params:
        - name: kraken_database
          value: bacteria
      # can be a real id or key in 'destinations' dict below
      destination: stampede_skx_normal
      login_required: true
    - destination: multi_direct
      login_required: true

  kraken2:
    - params:
      - name: kraken2_database
        type: data_table_lookup
        table_name: kraken2_databases
        value_template: '{value}/hash.k2d'
        op: '>'
        value: 84G
      destination: stampede_skx_normal
      login_required: true
    - params:
      - name: kraken2_database
        type: data_table_lookup
        table_name: kraken2_databases
        value_template: '{value}/hash.k2d'
        op: '>'
        value: 24G
      destination: jetstream_tacc_xlarge_direct
      #destination: stampede_normal
      login_required: true
    - destination: multi_direct
      login_required: true

  # align_families gets 192 hours of walltime
  align_families:
    destination: slurm_multi_long_direct
    login_required: true
    spec:
     time: 192

  #fasterq_dump:
  #  destination: multi_long
  #  login_required: true

  #
  # Bridges Tools
  #

  abyss-pe:
    destination: bridges_normal
    login_required: true

  # SPAdes (and thus Unicycler) uses at most 250GB
  spades:
    - params:
        - {name: libraries.files.file_type.type, value: separate}
        - {name: libraries.files.file_type.fwd_reads, op: '<', value: 100M}
      destination: multi_direct
      login_required: true
    - params:
        - {name: libraries.files.file_type.type, value: interleaved}
        - {name: libraries.files.file_type.interleaved_reads, op: '<', value: 200M}
      destination: multi_direct
      login_required: true
    - params:
        - {name: libraries.files.file_type.type, value: merged}
        - {name: libraries.files.file_type.merged_reads, op: '<', value: 100M}
      destination: multi
      login_required: true
    - params:
        - {name: libraries.files.file_type.type, value: unpaired}
        - {name: libraries.files.file_type.unpaired_reads, op: '<', value: 100M}
      destination: multi_direct
      login_required: true
    - params:
        - {name: libraries.files.file_type.type, value: paired-collection}
        - {name: libraries.files.file_type.fastq_collection, op: '<', value: 100M}
      destination: multi_direct
      login_required: true
    - destination: bridges_shared_64gb
      login_required: true
      env:
        # SPAdes uses 2GB+ per thread regardless of what you set the memory limit to, so we have to decrease the threads
        # to avoid using too much memory
        - name: GALAXY_SLOTS
          value: "24"
    #destination: bridges_normal
    #login_required: true
    #spec:
    #  mem: 288G
    #env:
    #  #- name: GALAXY_MEMORY_MB
    #  #  value: "245760"
    #  - name: GALAXY_SLOTS
    #    value: "64"
    #  # TODO: appropriate value for Bridges-2?
    #  - execute: ulimit -s 24576

  unicycler:
    - params:
        #- {name: paired_unpaired.fastq_input_selector, value: [paired, paired_collection, single]}
        - {name: paired_unpaired.fastq_input1, op: '>', value: 800M}
      destination: bridges_shared_64gb
      login_required: true
      env:
        - name: GALAXY_SLOTS
          value: "24"
    # Use multi for all (but Bridges can be selected from the resource selector)
    - destination: multi_direct
      login_required: true
  #  # Use multi for very small (e.g. training) datasets
  #  - params:
  #      - {name: paired_unpaired.fastq_input1, op: '<', value: 100M}
  #    destination: multi
  #  # Otherwise standard Bridges
  #  - destination: bridges_normal
  #    #spec:
  #    #  mem: 288G
  #    env:
  #      - execute: ulimit -s 24576

  # Users should use the new version of Trinity
  trinity_psc:
    destination: bridges_normal
    login_required: true

  trinity:
    # first matching param set is used
    # for collection params, comparison is implicitly on size of pair member 0

    # normalizing inputs < 10GB get 5 * 48GB = 240GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 240G, time: 72}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 240G, time: 72}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 10G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 240G, time: 72}

    # normalizing 10G <= inputs < 100G get 10 * 48GB = 480GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 100G}
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}

    # normalizing inputs >= 100G get 15 * 48GB = 720GB
    - params:
        - {name: norm, value: true}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 720G, time: 96}

    # not normalizing inputs < 10GB get 10 * 48GB = 480GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 10G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 480G, time: 96}

    # not normalizing 10G <= inputs < 100G get 15 * 48GB = 720GB
    - params:
        - {name: pool.inputs.paired_or_single,  value: [single, unmerged_single_collection]}
        - {name: pool.inputs.input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 720G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single,  value: paired}
        - {name: pool.inputs.left_input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 720G, time: 96}
    - params:
        - {name: pool.inputs.paired_or_single, value: [paired_collection, unmerged_paired_collection]}
        - {name: pool.inputs.pair_input, op: '<', value: 100G}
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 720G, time: 96}

    # not normalizing inputs >= 100G get 20 * 48GB = 960GB
    - params:
        - {name: norm, value: false}
      destination: bridges_normal
      login_required: true
      #spec: {mem: 960G, time: 96}

    # default if no matching params (shouldn't happen)
    - destination: bridges_normal
      login_required: true
      spec: {time: 24}

  #
  # Stampede tools
  #
  bwa_color_wrapper: {destination: stampede_normal, login_required: true}
  bowtie_color_wrapper: {destination: stampede_normal, login_required: true}
  megablast_wrapper: {destination: stampede_normal, login_required: true}
  #ncbi_blastn_wrapper: {destination: stampede_normal, login_required: true}
  #ncbi_blastp_wrapper: {destination: stampede_normal, login_required: true}
  #ncbi_blastx_wrapper: {destination: stampede_normal, login_required: true}
  ncbi_rpsblast_wrapper: {destination: stampede_normal, login_required: true}
  ncbi_tblastn_wrapper: {destination: stampede_normal, login_required: true}
  ncbi_tblastx_wrapper: {destination: stampede_normal, login_required: true}

  #
  # Frontera tools
  #
{% for tool_id in galaxy_frontera_tools %}
  {{ tool_id }}: {destination: frontera_small, login_required: true}
{% endfor %}
  busco:
    destination: frontera_small
    login_required: true
    spec:
      # busco crashes with the full thread count because it uses too much memory (even 12 was too many)
      ntasks: 10

# count of queued jobs in these destinations count against the other destinations (i.e. they're probably just slightly
# different params on the same queue)
share_job_counts:
  -
    - slurm_multi
    - slurm_multi_py2
    - slurm_multi_memory_resubmit
    - slurm_multi_long
    - slurm_reserved_multi
    - slurm_multi_direct
    - slurm_multi_py2_direct
    - slurm_multi_long_direct
  -
    - jetstream_iu_multi
    - jetstream_iu_multi_py2
    - jetstream_iu_multi_long
    #- reserved_jetstream_iu_multi
    - jetstream_iu_multi_direct
    - jetstream_iu_multi_py2_direct
    - jetstream_iu_multi_long_direct
  -
    - jetstream_tacc_multi
    - jetstream_tacc_multi_py2
    - jetstream_tacc_multi_long
    #- reserved_jetstream_tacc_multi
    - jetstream_tacc_multi_direct
    - jetstream_tacc_multi_py2_direct
    - jetstream_tacc_multi_long_direct

# TODO: now that share_job_counts is implemented, drop dict in list dests?
destinations:
  #normal_py2:
  #  - id: slurm_py2
  #  - id: jetstream_iu_normal_py2
  multi_py2:
    - id: slurm_multi_py2
    - id: jetstream_iu_multi_py2
      queue_factor: 2
    - id: jetstream_tacc_multi_py2
      queue_factor: 4
  multi_py2_direct:
    - id: slurm_multi_py2_direct
    - id: jetstream_iu_multi_py2_direct
      queue_factor: 2
    - id: jetstream_tacc_multi_py2_direct
      queue_factor: 4
  multi:
    - id: slurm_multi
    - id: jetstream_iu_multi
      # jetstream can run far fewer jobs than roundup, so we weight its job count by a factor of 2 since its throughput
      # will be lower
      queue_factor: 2
      # could also set threshold: on each member, default is 4
    - id: jetstream_tacc_multi
      queue_factor: 4
  multi_direct:
    - id: slurm_multi_direct
    - id: jetstream_iu_multi_direct
      queue_factor: 2
    - id: jetstream_tacc_multi_direct
      queue_factor: 4
  reserved_multi:
    - id: slurm_reserved_multi_direct
    # FIXME: not configured right in slurm
    #- id: reserved_jetstream_iu_multi
    #- id: reserved_jetstream_tacc_multi
  multi_long:
    - id: slurm_multi_long
    - id: jetstream_iu_multi_long
    - id: jetstream_tacc_multi_long
    - id: stampede_long
  jetstream_multi:
    - id: jetstream_iu_multi
      queue_factor: 2
    - id: jetstream_tacc_multi
      queue_factor: 4
  slurm_multi:
    valid:
      - time
  slurm_multi_long:
    valid:
      - time
  jetstream_iu_multi:
    valid:
      - time
  jetstream_tacc_multi:
    valid:
      - time
  jetstream_tacc_xlarge:
    valid:
      - time
  stampede_normal:
    valid:
      - ntasks
      - time
    max:
      ntasks: 272
      time: 48
  stampede_development:
    valid:
      - ntasks
      - time
    max:
      ntasks: 272
    override:
      time: 2
  stampede_skx_normal:
    valid:
      - ntasks
      - time
    max:
      ntasks: 96
      time: 48
  stampede_skx_development:
    valid:
      - ntasks
      - time
    max:
      ntasks: 96
    override:
      time: 2
  #multi_long:
  #  max:
  #    time: 72
  #jetstream_iu_multi_long:
  #  max:
  #    time: 72
  stampede_long:
    max:
      time: 120
  frontera_small:
    valid:
      - ntasks
      - time
    max:
      ntasks: 56
      time: 48
  frontera_development:
    valid:
      - ntasks
      - time
    max:
      ntasks: 56
    override:
      time: 2
  bridges_normal:
    valid:
      #- mem
      - ntasks
      - time
    max:
      ntasks: 128
      time: 36
    override:
      time: 48
      #mem: 720G
    #normalize:
    #  mem: 48G
  bridges_development:
    valid:
      #- mem
      - ntasks
      - time
    max:
      ntasks: 128
    override:
      time: 2
    #override:
    #  mem: 720G
    #normalize:
    #  mem: 48G

groups:
  Job Priority Users:
    destination_overrides:
      slurm_normal: slurm_reserved_normal
      slurm_normal_16gb: slurm_reserved_normal_16gb
      slurm_normal_32gb: slurm_reserved_normal_32gb
      multi: reserved_multi
  Job Test Users:
    destination_overrides:
      #slurm_upload: slurm_test_upload
      slurm_normal: slurm_test_normal
      slurm_normal_16gb: slurm_test_normal
      slurm_normal_32gb: slurm_test_normal
      slurm_normal_64gb: slurm_test_normal
      multi: slurm_test_normal
      slurm_multi: slurm_test_normal
      slurm_normal_conda: slurm_test_normal_conda
      slurm_normal_py2: slurm_test_normal_py2
      slurm_normal_galaxy_env: slurm_test_normal_galaxy_env
      slurm_normal_resolv_fix: slurm_test_normal_resolv_fix
      slurm_multi_conda: slurm_test_normal_conda
      frontera_small: frontera_development
      stampede_normal: stampede_development
      stampede_skx_normal: stampede_skx_development
      bridges_normal: bridges_development
      bridges_shared_128gb: bridges_development
      bridges_shared_64gb: bridges_development
      bridges_extreme_1tb: bridges_development
      expanse_normal: expanse_development
      expanse_shared_128gb: expanse_development
      expanse_shared_64gb: expanse_development
      slurm_normal_direct: slurm_test_normal_direct
      slurm_normal_16gb_direct: slurm_test_normal_direct
      slurm_normal_32gb_direct: slurm_test_normal_direct
      slurm_normal_64gb_direct: slurm_test_normal_direct
      multi_direct: slurm_test_normal_direct
      slurm_multi_direct: slurm_test_normal_direct
      slurm_normal_py2_direct: slurm_test_normal_py2_direct
  Job Resource Param Users:
    param_overrides: true

training_tools:
  incompatible:
    # kraken2 loads the entire selected reference into memory regardless of the input size
    - kraken2
    # TODO: document why these don't work
    - unicycler
    - rna_starsolo
    - rna_star
    - minimap2
    - ncbi_blastp_wrapper
  mapping:
    _default_: slurm_training
    bowtie2: slurm_training_multi_large
    rseqc_geneBody_coverage: slurm_training_long
    genrich: slurm_training_large
    wig_to_bigWig: slurm_training_xlarge
